// Code generated by MockGen. DO NOT EDIT.
// Source: ../../internal/service/quiz_suite_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "quizlet/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQuizSuiteService is a mock of QuizSuiteService interface.
type MockQuizSuiteService struct {
	ctrl     *gomock.Controller
	recorder *MockQuizSuiteServiceMockRecorder
}

// MockQuizSuiteServiceMockRecorder is the mock recorder for MockQuizSuiteService.
type MockQuizSuiteServiceMockRecorder struct {
	mock *MockQuizSuiteService
}

// NewMockQuizSuiteService creates a new mock instance.
func NewMockQuizSuiteService(ctrl *gomock.Controller) *MockQuizSuiteService {
	mock := &MockQuizSuiteService{ctrl: ctrl}
	mock.recorder = &MockQuizSuiteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuizSuiteService) EXPECT() *MockQuizSuiteServiceMockRecorder {
	return m.recorder
}

// AddQuizToSuite mocks base method.
func (m *MockQuizSuiteService) AddQuizToSuite(quizSuiteID, quizID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddQuizToSuite", quizSuiteID, quizID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddQuizToSuite indicates an expected call of AddQuizToSuite.
func (mr *MockQuizSuiteServiceMockRecorder) AddQuizToSuite(quizSuiteID, quizID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuizToSuite", reflect.TypeOf((*MockQuizSuiteService)(nil).AddQuizToSuite), quizSuiteID, quizID)
}

// CreateQuizSuite mocks base method.
func (m *MockQuizSuiteService) CreateQuizSuite(quizSuite *models.QuizSuite) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuizSuite", quizSuite)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateQuizSuite indicates an expected call of CreateQuizSuite.
func (mr *MockQuizSuiteServiceMockRecorder) CreateQuizSuite(quizSuite interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuizSuite", reflect.TypeOf((*MockQuizSuiteService)(nil).CreateQuizSuite), quizSuite)
}

// DeleteQuizSuite mocks base method.
func (m *MockQuizSuiteService) DeleteQuizSuite(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuizSuite", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuizSuite indicates an expected call of DeleteQuizSuite.
func (mr *MockQuizSuiteServiceMockRecorder) DeleteQuizSuite(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuizSuite", reflect.TypeOf((*MockQuizSuiteService)(nil).DeleteQuizSuite), id)
}

// GetQuizSuiteByID mocks base method.
func (m *MockQuizSuiteService) GetQuizSuiteByID(id uint) (*models.QuizSuite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuizSuiteByID", id)
	ret0, _ := ret[0].(*models.QuizSuite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuizSuiteByID indicates an expected call of GetQuizSuiteByID.
func (mr *MockQuizSuiteServiceMockRecorder) GetQuizSuiteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuizSuiteByID", reflect.TypeOf((*MockQuizSuiteService)(nil).GetQuizSuiteByID), id)
}

// GetQuizSuitesByUserID mocks base method.
func (m *MockQuizSuiteService) GetQuizSuitesByUserID(userID uint) ([]*models.QuizSuite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuizSuitesByUserID", userID)
	ret0, _ := ret[0].([]*models.QuizSuite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuizSuitesByUserID indicates an expected call of GetQuizSuitesByUserID.
func (mr *MockQuizSuiteServiceMockRecorder) GetQuizSuitesByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuizSuitesByUserID", reflect.TypeOf((*MockQuizSuiteService)(nil).GetQuizSuitesByUserID), userID)
}

// RemoveQuizFromSuite mocks base method.
func (m *MockQuizSuiteService) RemoveQuizFromSuite(quizSuiteID, quizID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveQuizFromSuite", quizSuiteID, quizID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveQuizFromSuite indicates an expected call of RemoveQuizFromSuite.
func (mr *MockQuizSuiteServiceMockRecorder) RemoveQuizFromSuite(quizSuiteID, quizID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveQuizFromSuite", reflect.TypeOf((*MockQuizSuiteService)(nil).RemoveQuizFromSuite), quizSuiteID, quizID)
}

// UpdateQuizSuite mocks base method.
func (m *MockQuizSuiteService) UpdateQuizSuite(quizSuite *models.QuizSuite) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuizSuite", quizSuite)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuizSuite indicates an expected call of UpdateQuizSuite.
func (mr *MockQuizSuiteServiceMockRecorder) UpdateQuizSuite(quizSuite interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuizSuite", reflect.TypeOf((*MockQuizSuiteService)(nil).UpdateQuizSuite), quizSuite)
}
